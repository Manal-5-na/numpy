import numpy as np

# Function to input matrix and vector
def input_matrix_vector():
    n = int(input("Enter the size of the matrix (2 or 3): "))
    if n not in [2, 3]:
        print("Only 2x2 or 3x3 matrices are supported.")
        return None, None

    print(f"\nEnter the {n}x{n} matrix A:")
    A = np.array([[float(input(f"A[{i+1}][{j+1}]: ")) for j in range(n)] for i in range(n)])

    print(f"\nEnter the {n}x1 vector b:")
    b = np.array([float(input(f"b[{i+1}]: ")) for i in range(n)])

    return A, b

# Gaussian elimination using NumPy (manual approach)
def gaussian_elimination(A, b):
    A = A.astype(float)
    b = b.astype(float)
    n = len(b)

    # Forward elimination
    for i in range(n):
        # Make diagonal non-zero
        if A[i][i] == 0:
            for k in range(i+1, n):
                if A[k][i] != 0:
                    A[[i, k]] = A[[k, i]]
                    b[i], b[k] = b[k], b[i]
                    break
        for j in range(i+1, n):
            factor = A[j][i] / A[i][i]
            A[j] = A[j] - factor * A[i]
            b[j] = b[j] - factor * b[i]

    # Backward substitution
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = (b[i] - np.dot(A[i, i+1:], x[i+1:])) / A[i][i]
    return x

# Inverse method
def inverse_method(A, b):
    try:
        A_inv = np.linalg.inv(A)
        return A_inv @ b
    except np.linalg.LinAlgError:
        return "Matrix is singular; inverse does not exist."

# Main
def main():
    A, b = input_matrix_vector()
    if A is None:
        return

    print("\nMatrix A:")
    print(A)
    print("Vector b:")
    print(b)

    print("\nSolving using Gaussian Elimination...")
    solution_gauss = gaussian_elimination(A.copy(), b.copy())
    print("Solution:", solution_gauss)

    print("\nSolving using Inverse Matrix Method...")
    solution_inv = inverse_method(A, b)
    print("Solution:", solution_inv)

if __name__ == "__main__":
    main()
